#!/bin/bash

# Colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
PROFILE="standard"
UPDATE=false
CHECK_ONLY=false

# Base images repository location and GitHub URL
BASE_IMAGES_REPO=$(realpath "../docker-base-images")
GITHUB_REPO="https://github.com/jerryagenyi/docker-base-images.git"

# Function to check if Docker is installed
check_dependencies() {
    echo -e "\n${BLUE}Checking dependencies...${NC}"
    local errors=()

    if ! command -v docker &> /dev/null; then
        errors+=("Docker is not installed. Please install from: https://docs.docker.com/get-docker/")
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        errors+=("Docker Compose is not installed. Please install from: https://docs.docker.com/compose/install/")
    fi

    if [ ${#errors[@]} -ne 0 ]; then
        for error in "${errors[@]}"; do
            echo -e "${RED}Error: $error${NC}"
        done
        exit 1
    fi

    echo -e "${GREEN}✓ All dependencies are installed${NC}"
}

# Function to update base images
update_base_images() {
    echo -e "\n${BLUE}Checking for updates...${NC}"
    
    if [ ! -d "$BASE_IMAGES_REPO" ]; then
        echo -e "${YELLOW}Base images repository not found. Cloning...${NC}"
        git clone $GITHUB_REPO $BASE_IMAGES_REPO
    else
        (cd $BASE_IMAGES_REPO
         current=$(git rev-parse HEAD)
         git fetch
         latest=$(git rev-parse origin/main)
         
         if [ "$current" != "$latest" ]; then
             if [ "$CHECK_ONLY" = true ]; then
                 echo -e "${YELLOW}Updates available. Run with --update to apply.${NC}"
                 return
             fi
             echo -e "${GREEN}Updating base images...${NC}"
             git pull
         else
             echo -e "${GREEN}✓ Already up to date${NC}"
         fi)
    fi
}

# Function to generate .env file
generate_env_file() {
    echo -e "\n${BLUE}Generating .env file...${NC}"
    if [ -f ".env" ]; then
        echo -e "${YELLOW}Warning: .env file already exists. Skipping...${NC}"
        return
    fi

    cat > .env << EOL
# Generated by docker-init.sh
# Customize these values for your environment

# Application
APP_PORT=8000
PYTHON_VERSION=3.10

# PostgreSQL
POSTGRES_USER=user
POSTGRES_PASSWORD=change_me_in_production
POSTGRES_DB=mydb
POSTGRES_PORT=5432

# Redis (Full profile only)
REDIS_PORT=6379

# Monitoring (Full profile only)
GRAFANA_PORT=3000
PROMETHEUS_PORT=9090

# Base Images Path
BASE_IMAGES_PATH=$BASE_IMAGES_REPO
EOL

    echo -e "${GREEN}✓ Created .env file with default values${NC}"
}

# Function to create docker-compose.yaml
create_compose_file() {
    echo -e "\n${BLUE}Creating docker-compose.yaml for $PROFILE profile...${NC}"
    
    if [ -f "docker-compose.yaml" ]; then
        echo -e "${RED}Warning: docker-compose.yaml already exists${NC}"
        return
    fi

    profile_path="$BASE_IMAGES_REPO/profiles/$PROFILE.yaml"
    if [ ! -f "$profile_path" ]; then
        echo -e "${RED}Error: Profile template not found: $profile_path${NC}"
        exit 1
    fi

    cp "$profile_path" docker-compose.yaml
    echo -e "${GREEN}✓ Created docker-compose.yaml using $PROFILE profile${NC}"
}

# Function to print next steps
print_next_steps() {
    echo -e "\n${GREEN}Next Steps:${NC}"
    echo "1. Review and customize the generated files:"
    echo "   - docker-compose.yaml (Using $PROFILE profile)"
    echo "   - .env"
    echo "2. Add your application code"
    echo -e "3. Run ${YELLOW}docker-compose up --build${NC}"
    
    echo -e "\n${GREEN}Common Commands:${NC}"
    echo "docker-compose up --build    # Build and start services"
    echo "docker-compose down          # Stop services"
    echo "docker-compose logs -f       # Watch logs"

    if [ "$PROFILE" = "full" ]; then
        echo -e "\n${YELLOW}Note: You're using the full profile which includes monitoring.${NC}"
        echo "Access Grafana at: http://localhost:3000"
        echo "Access Prometheus at: http://localhost:9090"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --update)
            UPDATE=true
            shift
            ;;
        --check-only)
            CHECK_ONLY=true
            shift
            ;;
        --profile)
            shift
            if [[ $1 =~ ^(minimal|standard|full)$ ]]; then
                PROFILE=$1
            else
                echo -e "${RED}Error: Invalid profile. Choose from: minimal, standard, full${NC}"
                exit 1
            fi
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Main script execution
check_dependencies

if [ "$UPDATE" = true ] || [ "$CHECK_ONLY" = true ]; then
    update_base_images
    if [ "$CHECK_ONLY" = true ]; then exit 0; fi
fi

generate_env_file
create_compose_file
print_next_steps
