#!/bin/bash

# Colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Base images repository location and GitHub URL
BASE_IMAGES_REPO="../docker-base-images"
GITHUB_REPO="https://github.com/jerryagenyi/docker-base-images.git"

# Initialize arrays for service selection
declare -A SERVICES
SERVICES=(
    ["python"]="Python Base - Python 3.10 with common packages"
    ["node"]="Node.js Base - Node 18 with TypeScript support"
    ["miniconda"]="Miniconda - Python data science environment"
    ["pytorch"]="PyTorch - AI/ML development environment"
    ["postgres"]="PostgreSQL - Database with common extensions"
    ["nginx"]="Nginx - Web server and reverse proxy"
    ["caddy"]="Caddy - Modern web server with auto HTTPS"
    ["selenium"]="Selenium - Browser testing environment"
)

# Function to check if Docker is installed
check_docker() {
    echo -e "\n${BLUE}Checking dependencies...${NC}"
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Docker is not installed!${NC}"
        echo -e "Please install Docker from: https://docs.docker.com/get-docker/"
        exit 1
    fi
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}Docker Compose is not installed!${NC}"
        echo -e "Please install Docker Compose from: https://docs.docker.com/compose/install/"
        exit 1
    fi
    echo -e "${GREEN}✓ Docker and Docker Compose are installed${NC}"
}

# Function to update base images from GitHub
update_base_images() {
    echo -e "\n${BLUE}Updating base images from GitHub...${NC}"
    if [ ! -d "$BASE_IMAGES_REPO" ]; then
        git clone $GITHUB_REPO $BASE_IMAGES_REPO
    else
        (cd $BASE_IMAGES_REPO && git pull)
    fi
    echo -e "${GREEN}✓ Base images updated${NC}"
}

print_header() {
    echo -e "${BLUE}=================================${NC}"
    echo -e "${BLUE}Docker Base Images Initializer${NC}"
    echo -e "${BLUE}=================================${NC}"
}

# Interactive service selection
select_services() {
    echo -e "\n${GREEN}Select services to include (space-separated numbers):${NC}"
    local i=1
    local options=()
    for key in "${!SERVICES[@]}"; do
        echo "$i) ${YELLOW}$key${NC} - ${SERVICES[$key]}"
        options[$i]=$key
        ((i++))
    done
    
    read -p "Enter your choices (e.g., '1 3 5'): " choices
    
    selected_services=()
    for choice in $choices; do
        if [[ $choice =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -lt "$i" ]; then
            selected_services+=(${options[$choice]})
        fi
    done
}

# Generate .env file with defaults
generate_env_file() {
    echo -e "\n${BLUE}Generating .env file...${NC}"
    if [ -f ".env" ]; then
        echo -e "${YELLOW}Warning: .env file already exists. Skipping...${NC}"
        return
    fi

    cat > .env << EOL
# Generated by docker-init.sh
# Customize these values for your environment

# PostgreSQL
POSTGRES_USER=user
POSTGRES_PASSWORD=change_me_in_production
POSTGRES_DB=mydb
POSTGRES_PORT=5432

# Application
APP_PORT=8000
NODE_ENV=development

# Caddy
DOMAIN=localhost
EOL
    echo -e "${GREEN}✓ Created .env file with default values${NC}"
}

# Configure Caddy if selected
configure_caddy() {
    if [[ " ${selected_services[@]} " =~ " caddy " ]]; then
        echo -e "\n${BLUE}Configuring Caddy...${NC}"
        read -p "Enter your domain (default: localhost): " domain
        domain=${domain:-localhost}
        
        cat > Caddyfile << EOL
${domain} {
    reverse_proxy app:8000
    tls internal
}
EOL
        echo -e "${GREEN}✓ Created Caddyfile${NC}"
    fi
}

create_compose_file() {
    if [ -f "docker-compose.yaml" ]; then
        echo -e "${RED}Warning: docker-compose.yaml already exists${NC}"
        return 1
    fi

    echo -e "${GREEN}Creating docker-compose.yaml for selected services...${NC}"
    
    # Start with version
    cat > docker-compose.yaml << EOL
version: '3.8'

services:
EOL

    # Add selected services
    for service in "${selected_services[@]}"; do
        case $service in
            "python")
                cat >> docker-compose.yaml << EOL
  app:
    build:
      context: ${BASE_IMAGES_REPO}/python-base
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - "\${APP_PORT:-8000}:8000"
    env_file: .env
EOL
                ;;
            "postgres")
                cat >> docker-compose.yaml << EOL
  db:
    build:
      context: ${BASE_IMAGES_REPO}/postgres
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env
    ports:
      - "\${POSTGRES_PORT:-5432}:5432"
EOL
                ;;
            "caddy")
                cat >> docker-compose.yaml << EOL
  caddy:
    build:
      context: ${BASE_IMAGES_REPO}/caddy
      dockerfile: Dockerfile
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
EOL
                ;;
            # Add other services as needed
        esac
    done

    # Add volumes if needed
    if [[ " ${selected_services[@]} " =~ " postgres " ]] || [[ " ${selected_services[@]} " =~ " caddy " ]]; then
        cat >> docker-compose.yaml << EOL

volumes:
EOL
        if [[ " ${selected_services[@]} " =~ " postgres " ]]; then
            echo "  postgres_data:" >> docker-compose.yaml
        fi
        if [[ " ${selected_services[@]} " =~ " caddy " ]]; then
            echo "  caddy_data:" >> docker-compose.yaml
            echo "  caddy_config:" >> docker-compose.yaml
        fi
    fi

    echo -e "${GREEN}✓ Created docker-compose.yaml${NC}"
}

print_next_steps() {
    echo -e "\n${GREEN}Next Steps:${NC}"
    echo "1. Review and customize the generated files:"
    echo "   - docker-compose.yaml"
    echo "   - .env"
    if [[ " ${selected_services[@]} " =~ " caddy " ]]; then
        echo "   - Caddyfile"
    fi
    echo "2. Add your application code"
    echo -e "3. Run ${YELLOW}docker-compose up --build${NC}"
    
    echo -e "\n${GREEN}Common Commands:${NC}"
    echo "docker-compose up --build    # Build and start services"
    echo "docker-compose down          # Stop services"
    echo "docker-compose logs -f       # Watch logs"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --update)
            UPDATE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Main script execution
print_header
check_docker

if [ "$UPDATE" = true ]; then
    update_base_images
fi

select_services
generate_env_file
create_compose_file
configure_caddy
print_next_steps
