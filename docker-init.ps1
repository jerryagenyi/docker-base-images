# Docker Base Images Initializer PowerShell Script

# Colors for pretty output
$Red = "`e[31m"
$Green = "`e[32m"
$Blue = "`e[34m"
$Yellow = "`e[33m"
$Reset = "`e[0m"

# Base images repository location and GitHub URL
$BaseImagesRepo = "../docker-base-images"
$GithubRepo = "https://github.com/jerryagenyi/docker-base-images.git"

# Initialize hashtable for service selection
$Services = @{
    "python" = "Python Base - Python 3.10 with common packages"
    "node" = "Node.js Base - Node 18 with TypeScript support"
    "miniconda" = "Miniconda - Python data science environment"
    "pytorch" = "PyTorch - AI/ML development environment"
    "postgres" = "PostgreSQL - Database with common extensions"
    "nginx" = "Nginx - Web server and reverse proxy"
    "caddy" = "Caddy - Modern web server with auto HTTPS"
    "selenium" = "Selenium - Browser testing environment"
}

function Test-Docker {
    Write-Host "`n${Blue}Checking dependencies...$Reset"
    
    if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-Host "${Red}Docker is not installed!$Reset"
        Write-Host "Please install Docker Desktop from: https://docs.docker.com/desktop/windows/install/"
        exit 1
    }
    
    if (!(Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        Write-Host "${Red}Docker Compose is not installed!$Reset"
        Write-Host "Please install Docker Desktop which includes Docker Compose"
        exit 1
    }
    
    Write-Host "${Green}✓ Docker and Docker Compose are installed$Reset"
}

function Update-BaseImages {
    Write-Host "`n${Blue}Updating base images from GitHub...$Reset"
    if (!(Test-Path $BaseImagesRepo)) {
        git clone $GithubRepo $BaseImagesRepo
    } else {
        Push-Location $BaseImagesRepo
        git pull
        Pop-Location
    }
    Write-Host "${Green}✓ Base images updated$Reset"
}

function Write-Header {
    Write-Host "$Blue=================================$Reset"
    Write-Host "${Blue}Docker Base Images Initializer$Reset"
    Write-Host "$Blue=================================$Reset"
}

function Select-Services {
    Write-Host "`n${Green}Select services to include:$Reset"
    $i = 1
    $options = @{}
    
    foreach ($key in $Services.Keys) {
        Write-Host "$i) ${Yellow}$key$Reset - $($Services[$key])"
        $options[$i] = $key
        $i++
    }
    
    Write-Host "`nEnter numbers separated by spaces (e.g., '1 3 5'): " -NoNewline
    $choices = (Read-Host).Split(" ")
    
    $script:SelectedServices = @()
    foreach ($choice in $choices) {
        if ($choice -match '^\d+$' -and [int]$choice -ge 1 -and [int]$choice -lt $i) {
            $script:SelectedServices += $options[[int]$choice]
        }
    }
}

function New-EnvFile {
    Write-Host "`n${Blue}Generating .env file...$Reset"
    if (Test-Path ".env") {
        Write-Host "${Yellow}Warning: .env file already exists. Skipping...$Reset"
        return
    }

    @'
# Generated by docker-init.ps1
# Customize these values for your environment

# PostgreSQL
POSTGRES_USER=user
POSTGRES_PASSWORD=change_me_in_production
POSTGRES_DB=mydb
POSTGRES_PORT=5432

# Application
APP_PORT=8000
NODE_ENV=development

# Caddy
DOMAIN=localhost
'@ | Out-File -FilePath ".env" -Encoding UTF8

    Write-Host "${Green}✓ Created .env file with default values$Reset"
}

function New-CaddyConfig {
    if ($script:SelectedServices -contains "caddy") {
        Write-Host "`n${Blue}Configuring Caddy...$Reset"
        Write-Host "Enter your domain (press Enter for localhost): " -NoNewline
        $domain = Read-Host
        if ([string]::IsNullOrWhiteSpace($domain)) {
            $domain = "localhost"
        }
        
        @"
${domain} {
    reverse_proxy app:8000
    tls internal
}
"@ | Out-File -FilePath "Caddyfile" -Encoding UTF8

        Write-Host "${Green}✓ Created Caddyfile$Reset"
    }
}

function New-ComposeFile {
    if (Test-Path "docker-compose.yaml") {
        Write-Host "${Red}Warning: docker-compose.yaml already exists$Reset"
        return
    }

    Write-Host "${Green}Creating docker-compose.yaml for selected services...$Reset"
    
    # Start with version
    @'
version: '3.8'

services:
'@ | Out-File -FilePath "docker-compose.yaml" -Encoding UTF8

    # Add selected services
    foreach ($service in $script:SelectedServices) {
        switch ($service) {
            "python" {
                @"
  app:
    build:
      context: ${BaseImagesRepo}/python-base
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - "`${APP_PORT:-8000}:8000"
    env_file: .env
"@ | Add-Content "docker-compose.yaml"
            }
            "postgres" {
                @"
  db:
    build:
      context: ${BaseImagesRepo}/postgres
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env
    ports:
      - "`${POSTGRES_PORT:-5432}:5432"
"@ | Add-Content "docker-compose.yaml"
            }
            "caddy" {
                @"
  caddy:
    build:
      context: ${BaseImagesRepo}/caddy
      dockerfile: Dockerfile
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
"@ | Add-Content "docker-compose.yaml"
            }
        }
    }

    # Add volumes if needed
    if ($script:SelectedServices -contains "postgres" -or $script:SelectedServices -contains "caddy") {
        "`nvolumes:" | Add-Content "docker-compose.yaml"
        if ($script:SelectedServices -contains "postgres") {
            "  postgres_data:" | Add-Content "docker-compose.yaml"
        }
        if ($script:SelectedServices -contains "caddy") {
            "  caddy_data:" | Add-Content "docker-compose.yaml"
            "  caddy_config:" | Add-Content "docker-compose.yaml"
        }
    }

    Write-Host "${Green}✓ Created docker-compose.yaml$Reset"
}

function Write-NextSteps {
    Write-Host "`n${Green}Next Steps:$Reset"
    Write-Host "1. Review and customize the generated files:"
    Write-Host "   - docker-compose.yaml"
    Write-Host "   - .env"
    if ($script:SelectedServices -contains "caddy") {
        Write-Host "   - Caddyfile"
    }
    Write-Host "2. Add your application code"
    Write-Host "3. Run ${Yellow}docker-compose up --build$Reset"
    
    Write-Host "`n${Green}Common Commands:$Reset"
    Write-Host "docker-compose up --build    # Build and start services"
    Write-Host "docker-compose down          # Stop services"
    Write-Host "docker-compose logs -f       # Watch logs"
}

# Parse command line arguments
param(
    [switch]$Update
)

# Main script execution
Write-Header
Test-Docker

if ($Update) {
    Update-BaseImages
}

Select-Services
New-EnvFile
New-ComposeFile
New-CaddyConfig
Write-NextSteps
