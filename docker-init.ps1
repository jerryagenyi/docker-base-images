# Docker Base Images Initializer PowerShell Script

param(
    [switch]$Update,
    [switch]$CheckOnly,
    [ValidateSet("minimal", "standard", "full")]
    [string]$Profile = "standard"
)

# Colors for pretty output
$Red = "`e[31m"
$Green = "`e[32m"
$Blue = "`e[34m"
$Yellow = "`e[33m"
$Reset = "`e[0m"

# Base images repository location and GitHub URL
$BaseImagesRepo = Resolve-Path "../docker-base-images"
$GithubRepo = "https://github.com/jerryagenyi/docker-base-images.git"

function Test-Dependencies {
    Write-Host "`n${Blue}Checking dependencies...$Reset"
    
    $errors = @()
    
    if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
        $errors += "Docker is not installed. Please install Docker Desktop from: https://docs.docker.com/desktop/windows/install/"
    }
    
    if (!(Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        $errors += "Docker Compose is not installed. Please install Docker Desktop which includes Docker Compose."
    }
    
    if ($errors.Count -gt 0) {
        foreach ($error in $errors) {
            Write-Host "${Red}Error: $error$Reset"
        }
        exit 1
    }
    
    Write-Host "${Green}✓ All dependencies are installed$Reset"
}

function Update-BaseImages {
    Write-Host "`n${Blue}Checking for updates...$Reset"
    
    if (!(Test-Path $BaseImagesRepo)) {
        Write-Host "${Yellow}Base images repository not found. Cloning...$Reset"
        git clone $GithubRepo $BaseImagesRepo
    } else {
        Push-Location $BaseImagesRepo
        $current = git rev-parse HEAD
        git fetch
        $latest = git rev-parse origin/main
        
        if ($current -ne $latest) {
            if ($CheckOnly) {
                Write-Host "${Yellow}Updates available. Run with -Update to apply.$Reset"
                Pop-Location
                return
            }
            Write-Host "${Green}Updating base images...$Reset"
            git pull
        } else {
            Write-Host "${Green}✓ Already up to date$Reset"
        }
        Pop-Location
    }
}

function New-EnvFile {
    Write-Host "`n${Blue}Generating .env file...$Reset"
    if (Test-Path ".env") {
        Write-Host "${Yellow}Warning: .env file already exists. Skipping...$Reset"
        return
    }

    @"
# Generated by docker-init.ps1
# Customize these values for your environment

# Application
APP_PORT=8000
PYTHON_VERSION=3.10

# PostgreSQL
POSTGRES_USER=user
POSTGRES_PASSWORD=change_me_in_production
POSTGRES_DB=mydb
POSTGRES_PORT=5432

# Redis (Full profile only)
REDIS_PORT=6379

# Monitoring (Full profile only)
GRAFANA_PORT=3000
PROMETHEUS_PORT=9090

# Base Images Path
BASE_IMAGES_PATH=$BaseImagesRepo
"@ | Out-File -FilePath ".env" -Encoding UTF8

    Write-Host "${Green}✓ Created .env file with default values$Reset"
}

function New-ComposeFile {
    Write-Host "`n${Blue}Creating docker-compose.yaml for $Profile profile...$Reset"
    
    if (Test-Path "docker-compose.yaml") {
        Write-Host "${Red}Warning: docker-compose.yaml already exists$Reset"
        return
    }

    $profilePath = Join-Path $BaseImagesRepo "profiles/$Profile.yaml"
    if (!(Test-Path $profilePath)) {
        Write-Host "${Red}Error: Profile template not found: $profilePath$Reset"
        exit 1
    }

    Copy-Item $profilePath "docker-compose.yaml"
    Write-Host "${Green}✓ Created docker-compose.yaml using $Profile profile$Reset"
}

function Write-NextSteps {
    Write-Host "`n${Green}Next Steps:$Reset"
    Write-Host "1. Review and customize the generated files:"
    Write-Host "   - docker-compose.yaml (Using $Profile profile)"
    Write-Host "   - .env"
    Write-Host "2. Add your application code"
    Write-Host "3. Run ${Yellow}docker-compose up --build$Reset"
    
    Write-Host "`n${Green}Common Commands:$Reset"
    Write-Host "docker-compose up --build    # Build and start services"
    Write-Host "docker-compose down          # Stop services"
    Write-Host "docker-compose logs -f       # Watch logs"
    
    if ($Profile -eq "full") {
        Write-Host "`n${Yellow}Note: You're using the full profile which includes monitoring.$Reset"
        Write-Host "Access Grafana at: http://localhost:3000"
        Write-Host "Access Prometheus at: http://localhost:9090"
    }
}

# Main script execution
Test-Dependencies

if ($Update -or $CheckOnly) {
    Update-BaseImages
    if ($CheckOnly) { exit 0 }
}

New-EnvFile
New-ComposeFile
Write-NextSteps
